{"version":3,"sources":["components/Home.js","components/Info.js","components/About.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Home","maxPages","className","View","pagenumber","Info","React","useState","data","setData","dataIsVisible","setDataIsVisible","charName","setCharName","charDataVisible","setCharDataVisible","chardata","setchardata","filterValues","id","name","value","selectedFilter","setSelectedFilter","basicURL","fetchData","a","fetchURL","fetch","fetcheddata","json","jsn","Math","floor","count","jsnArr","results","console","log","getMoreInfo","i","length","title","newfetchURL","pushInfo","opening_crawl","e","ar","homeworld","homeworldJSON","filmsArr","films","filmFetch","filmFetchJSON","push","eye_color","skin_color","hair_color","climate","popilation","terrain","model","manufacturer","crew","classification","designation","average_lifespan","language","listItems","map","index","clear","style","backgroundColor","color","margin","padding","fontSize","onChange","parseInt","target","onClick","display","listStyle","type","About","href","rel","Navbar","to","App","textAlign","path","element","exact","component","Error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1eea87cc.chunk.js","sourcesContent":["import React from \"react\";\nimport { View } from \"react-native\";\nimport \"./Home.css\";\n\nfunction Home() {\n  return (\n    <div className=\"Home\">\n      <View>\n        <h1 className=\"header_home\">Welcome</h1>\n        <p2 className=\"middle\">\n          You have chosen the path to enlightenment. Here you can find knowledge\n          about Star Wars movie franchise.\n        </p2>\n        <p3 className=\"middle\">\n          Start by cliking the \"GET INFO\" button and selecting the information\n          you want to find.\n        </p3>\n        <p4 className=\"middle\">\n          If you want information about this project, click \"ABOUT\" button.\n        </p4>\n      </View>\n    </div>\n  );\n}\nexport default Home;\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport \"./Info.css\";\n\n//Declaring and initializing first page needed for fetch and declaring maxPages needed to sort through data\nlet pagenumber = 1;\nlet maxPages;\n\nfunction Info() {\n  //data is the variable that holds fetched data\n  let [data, setData] = React.useState([]);\n  //Determines is data is visible or not\n  let [dataIsVisible, setDataIsVisible] = React.useState(false);\n  //More info about character by name\n  let [charName, setCharName] = React.useState();\n  //Character info visibility\n  let [charDataVisible, setCharDataVisible] = React.useState(false);\n  let [chardata, setchardata] = React.useState([]);\n\n  //Values you can use to fetch different info from api\n  const filterValues = [\n    { id: 1, name: \"People\", value: \"people\" },\n    { id: 2, name: \"Planets\", value: \"planets\" },\n    { id: 3, name: \"Starships\", value: \"starships\" },\n    { id: 4, name: \"Films\", value: \"films\" },\n    { id: 5, name: \"Species\", value: \"species\" },\n    { id: 6, name: \"Vehicles\", value: \"vehicles\" },\n  ];\n\n  //Way to apply the filter\n  let [selectedFilter, setSelectedFilter] = React.useState(0);\n\n  //Api url\n  const basicURL = \"https://swapi.dev/api/\";\n\n  //Function to fetch data\n  const fetchData = async () => {\n    const fetchURL = `${basicURL}${filterValues[selectedFilter].value}/?page=${pagenumber}`;\n    let fetcheddata = await fetch(fetchURL);\n    let jsn = await fetcheddata.json();\n    //Planets filter needed separate maxpage calculator since it had exactly 60\n    //pieces of data and +1 after Math.floor made so it would try get data\n    //page that wasnt there\n    if (selectedFilter === 1) {\n      maxPages = Math.floor(jsn.count / 10);\n    } else {\n      maxPages = Math.floor(jsn.count / 10) + 1;\n    }\n\n    let jsnArr = jsn.results;\n    setData(jsnArr);\n    setDataIsVisible(true);\n\n    console.log(jsnArr);\n  };\n  const getMoreInfo = async () => {\n    if (selectedFilter === 3) {\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].title === charName) {\n          let id;\n          console.log(id);\n          if (pagenumber === 1) {\n            id = i + 1;\n          } else {\n            id = i + 1 + 10 * (pagenumber - 1);\n          }\n          console.log(id);\n          console.log(`${filterValues[selectedFilter].value}`);\n          const newfetchURL = `${basicURL}${filterValues[selectedFilter].value}/${id}/`;\n          let fetcheddata = await fetch(newfetchURL);\n          let jsn = await fetcheddata.json();\n          pushInfo(jsn.opening_crawl);\n        }\n      }\n    } else {\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].name === charName) {\n          let id;\n          if (pagenumber === 1) {\n            id = i + 1;\n            console.log(id);\n          } else {\n            id = i + 1 + 10 * (pagenumber - 1);\n            if (id >= 17 && selectedFilter === 0) {\n              //Id number 17 was missing from people database so had skip it\n              id++;\n            }\n            console.log(id);\n          }\n          const newfetchURL = `${basicURL}${filterValues[selectedFilter].value}/${id}/`;\n          let fetcheddata = await fetch(newfetchURL);\n          let jsn = await fetcheddata.json();\n          pushInfo(jsn);\n        }\n      }\n    }\n    setCharName(\"\");\n  };\n\n  const pushInfo = async (e) => {\n    let ar = [];\n    if (selectedFilter === 3) {\n      ar = [e, \"\"];\n      setchardata(ar);\n    } else if (selectedFilter === 0) {\n      let homeworld = await fetch(e.homeworld);\n      let homeworldJSON = await homeworld.json();\n      let filmsArr = [];\n      for (let i = 0; i < e.films.length; i++) {\n        let filmFetch = await fetch(e.films[i]);\n        let filmFetchJSON = await filmFetch.json();\n        filmsArr.push(filmFetchJSON.title);\n      }\n\n      ar = [\n        `${e.name}`,\n        `Eye color: ${e.eye_color}`,\n        `Skin color: ${e.skin_color}`,\n        `Hair color: ${e.hair_color}`,\n        `Homeworld: ${homeworldJSON.name}`,\n        `Films: ${filmsArr}`,\n      ];\n      setchardata(ar);\n    } else if (selectedFilter === 1) {\n      ar = [\n        `${e.name}`,\n        `Climate: ${e.climate}`,\n        `Population: ${e.popilation}`,\n        `Terrain: ${e.terrain}`,\n      ];\n      setchardata(ar);\n    } else if (selectedFilter === 2) {\n      ar = [\n        `${e.name}`,\n        `Model: ${e.model}`,\n        `Manufacturer: ${e.manufacturer}`,\n        `Length: ${e.length}`,\n        `Crew size: ${e.crew}`,\n      ];\n      setchardata(ar);\n    } else if (selectedFilter === 4) {\n      ar = [\n        `${e.name}`,\n        `Classification: ${e.classification}`,\n        `Designation: ${e.designation}`,\n        `Average lifespan: ${e.average_lifespan}`,\n        `Language: ${e.language}`,\n      ];\n      setchardata(ar);\n    } else if (selectedFilter === 5) {\n      ar = [\n        `${e.name}`,\n        `Model: ${e.model}`,\n        `Manufacturer: ${e.manufacturer}`,\n        `Length: ${e.length}`,\n        `Crew size: ${e.crew}`,\n      ];\n      setchardata(ar);\n    }\n    setCharDataVisible(true);\n  };\n  //Way to put fetch into data variable\n  //Needed a separate part when fetching movies since they had different response\n  let listItems = data.map((value, index) => {\n    if (selectedFilter === 3) {\n      return <li key={index}>{value.title}</li>;\n    } else {\n      return <li key={index}>{value.name}</li>;\n    }\n  });\n\n  //When filter is changed\n  const handleSelect = (e) => {\n    pagenumber = 1;\n    setSelectedFilter(parseInt(e.target.value));\n    clear();\n    console.log(selectedFilter);\n  };\n  const handleNameChange = (e) => {\n    setCharName(e.target.value);\n  };\n\n  //Clears screen\n  const clear = () => {\n    setData([]);\n    setchardata([]);\n    setDataIsVisible(false);\n  };\n\n  //Adds 1 to pagenumber and fetches again\n  const nextPage = () => {\n    if (pagenumber < maxPages) {\n      let newPage = pagenumber + 1;\n      pagenumber = newPage;\n      fetchData();\n    }\n  };\n  //Same as above except pagenumber down\n  const previousPage = () => {\n    if (pagenumber > 1) {\n      let oldPage = pagenumber - 1;\n      pagenumber = oldPage;\n      fetchData();\n    }\n  };\n\n  return (\n    <div className=\"Info\">\n      <div className=\"buttons\">\n        <select\n          style={{\n            backgroundColor: \"black\",\n            color: \"white\",\n            margin: \"6px\",\n            padding: \"5px 20px\",\n            fontSize: \"20px\",\n          }}\n          name=\"selectList\"\n          id=\"selectList\"\n          onChange={handleSelect}\n        >\n          <option value=\"0\">People</option>\n          <option value=\"1\">Planets</option>\n          <option value=\"2\">Starships</option>\n          <option value=\"3\">Films</option>\n          <option value=\"4\">Species</option>\n          <option value=\"5\">Vehicles</option>\n        </select>\n        <button\n          style={{\n            backgroundColor: \"black\",\n            color: \"white\",\n            margin: \"6px\",\n            padding: \"5px 40px\",\n            fontSize: \"20px\",\n          }}\n          onClick={fetchData}\n        >\n          Search\n        </button>\n        <button\n          style={{\n            backgroundColor: \"black\",\n            color: \"white\",\n            margin: \"6px\",\n            padding: \"5px 40px\",\n            fontSize: \"20px\",\n          }}\n          onClick={clear}\n        >\n          Clear\n        </button>\n      </div>\n      <div\n        className=\"infoscreen\"\n        style={{ display: dataIsVisible ? \"block\" : \"none\" }}\n      >\n        <View className=\"infoview\">\n          <ul className=\"dataList\" style={{ listStyle: \"none\" }}>\n            {listItems}\n          </ul>\n        </View>\n        <View>\n          <div\n            className=\"moreInfo\"\n            style={{ display: charDataVisible ? \"block\" : \"none\" }}\n          >\n            {chardata.map((chardata) => (\n              <li style={{ listStyle: \"none\" }} key={chardata}>\n                {chardata}\n              </li>\n            ))}\n          </div>\n        </View>\n      </div>\n\n      <div>\n        <div\n          className=\"pageButtons\"\n          style={{\n            margin: \"10px\",\n            display: dataIsVisible ? \"block\" : \"none\",\n          }}\n        >\n          <button className=\"button\" onClick={nextPage}>\n            Next\n          </button>\n\n          <p1 className=\"pageText\">\n            {pagenumber}/{maxPages}\n          </p1>\n\n          <button className=\"button\" onClick={previousPage}>\n            Previous\n          </button>\n          <div>\n            <label>\n              <input\n                className=\"input\"\n                type=\"text\"\n                value={charName}\n                onChange={handleNameChange}\n              ></input>\n              <button className=\"button\" onClick={getMoreInfo}>\n                More info\n              </button>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Info;\n","import \"./About.css\";\n\nfunction About() {\n  return (\n    <div className=\"About\">\n      <div className=\"left\">\n        <p>This API reader is my advanced web development course project. </p>\n        <p>\n          It uses open api{\" \"}\n          <a\n            href=\"https://swapi.dev/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            \"https://swapi.dev/\"\n          </a>\n          and with fetch we can get data in JSON format.\n        </p>\n        <p>\n          Fun little project although realize it's not done in the most optimal\n          way.\n        </p>\n      </div>\n    </div>\n  );\n}\nexport default About;\n","import { Link } from \"react-router-dom\";\nimport \"./Navbar.css\";\n\nfunction Navbar() {\n  return (\n    <div>\n      <nav>\n        <Link className=\"navbar-link\" to=\"/\">\n          HOME\n        </Link>\n\n        <Link className=\"navbar-link\" to=\"/Info\">\n          GET INFO\n        </Link>\n        <Link className=\"navbar-link\" to=\"/About\">\n          ABOUT\n        </Link>\n      </nav>\n    </div>\n  );\n}\nexport default Navbar;\n","import { Route, Routes } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Info from \"./components/Info\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport \"./App.css\";\n\nimport React from \"react\";\nconst App = () => {\n  return (\n    <main>\n      <h1 style={{ textAlign: \"center\" }}>\n        Star Wars API reader\n        <Navbar />\n        <Routes>\n          <Route path=\"/\" element={<Home />} exact />\n          <Route path=\"/info\" element={<Info />} />\n          <Route path=\"/about\" element={<About />} />\n          <Route component={Error} />\n        </Routes>\n      </h1>\n    </main>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}